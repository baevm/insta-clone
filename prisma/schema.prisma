// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String
  avatar        String?
  description   String?
  followedBy    User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comments[]
}

model Post {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  images     String[]
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?
  likedUsers String[]   @default([])
  comments   Comments[]
}

model Comments {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  body       String
  likedUsers String[] @default([])

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
